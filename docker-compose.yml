# This docker-compose.yml is for LOCAL DEVELOPMENT only
# Render uses cloud services, not this configuration

version: '3.8'
services:

  stockify-app:
    container_name: stockify-app
    image: stockify-app:1
    restart: always
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Local development database
      DATABASE_URL: jdbc:postgresql://stockify_user:postgres@stockify-app-postgresql:5432/stockify_app
      CLOUDINARY_CLOUD_NAME: dd8d5yvdv
      CLOUDINARY_API_KEY: 424539718517918
      CLOUDINARY_API_SECRET: FriIuvdVVf181Wrmvw-7ZJHMMrQ
      JWT_SECRET_KEY: wD3U3XjP7nB3cbmJjQYFhfZ6qPzO7whVYaAkM7b9c10=
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
    depends_on:
      stockify-app-postgresql:
        condition: service_healthy

  # Local PostgreSQL for development
  stockify-app-postgresql:
    container_name: stockify-app-postgresql
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: stockify_app
      POSTGRES_USER: stockify_user
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stockify_user -d stockify_app"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 30s
    volumes:
      - postgresql_data:/var/lib/postgresql/data

volumes:
  postgresql_data:

# Local development commands:
# docker-compose up -d          # Start services
# docker-compose down           # Stop services  
# docker-compose logs -f app    # View app logs
# docker-compose down -v        # Remove all data

# Production on Render uses:
# - Cloud PostgreSQL service
# - Environment variables for connection
# - No docker-compose needed